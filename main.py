import telebot                                                   # Telegram bot module
from re import match,  compile                     # ANALYS WORD
from db import read_db, write_db                # database functions
database = read_db()
bot = telebot.TeleBot(database['token'])


def is_bad(word, bad, excepts):  # check bad words
    # Replace spec.symbols
    # Excepts
    if word in excepts:
        return False
    # Agressive mode, causes false positives
    # res = search(bad, word)
    res = match(bad, word)
    if res is not None:
        return True
    else:
        return False


def rep(word):  # TRANSLIT an OTHER
    symbols = [['e', '–µ'], ['a', '–∞'], ['i', '–∏'], ['t', '—Ç'], ['y', '—É'], ['u', '—É'], ['o', '–æ'], ['d', '–¥'], ['x', '—Ö'],
                        ['t', '—Ç'], ['p', '–ø'], ['r', '—Ä'], ['h', '—Ö'], ['b', '–±'], ['n', '–Ω'],
                        ['üáΩ', '—Ö'], ['üáæ', '—É'], ['üáπ', '—Ç'], ['üá™', '–µ'], ['‚ùå', '—Ö'], ['‚úñ', '—Ö'], ['‚ùé', '—Ö']]
    for symbol in symbols:
        word = word.replace(symbol[0], symbol[1])
    return word


def catch(message):  # CATCH BAD WORDS
    bad_list = ['—Ö—É.+–π', '—Ö.+—É–π', 'x—É–∏', 'xy–∏', '—Öy–∏', 'xy–π', 'x—É–π', '—Ö—É.', '.+—Ö—É–µ', '.+—Ö—É—ë', 'xyu', 'xui', '—Öy–π',
                '–ø–æ—Ö—É', '.—É–π', '–∞—Ö.–µ–Ω', '–∞.—É–µ', '.+—Ö—É–π', '.+—Ö—É–π', '—Ö—É—è', '.+—Ö—É—è',
                '–±–ª.+—Ç—å', '–±–ª—è', '–±–ª.+—Ç—å', '.+–±–ª+.–¥—å+', '.+–±–ª.+–¥—å',
                '—Ç—Ä–∞—Ö', '–µ–±.+—Ç—å', '–µ–±—É', '–µ–±–∞–ª', '..–µ–±–µ–Ω', '—ë–±–∞–Ω', '–µ–±—Ç—å', 'eby', '..–µ–±–∏—Å—å', '—É–µ–±', '—É—ë–±', '–µ–±–µ–π', '–µ–±—É', '–µ–±–ª', '–µ–±–∞',
                '.+–µ–±–Ω.+—Ç.+', '.+–µ–±.—Ç—å', '–µ–±–æ', '.+–µ–±–æ', '.+–µ–±–∞', '.+—ë–±—ã', '–µ–±–∏.+', '—ë–±–∞.+', '–µ–±–ª—è', '–µ–±—ë.+', '–∑–∞–µ–±', '–∑–∞–µ–±.+', '–∑–∞—ë–±',
                '.+–∑–∞–µ–±', '.+–∑–∞—ë–±', '–∑–∞–µ–±.+', '–∑–∞—ë–±.+', '—ë–±—Å–∫', '.+–µ–±—É—á.+',
                '–µ–±.+—É—Ç—ã–µ', '–µ.+–±.+—É—Ç—ã–µ', '–µ–±–∞–Ω', '–µ–±.+–Ω', '–µ–±–Ω', '—ë–±–Ω', '.+—ë–±–∫–∞', '.+–µ–±–∫–∞',
                '–ø—Ä..–±–∞', '.–±.–ª', '—É.–±', '.–±–ª–∞–Ω',
                '.+–ø–∏–∑–¥', '–ø–∏–∑–µ—Ü', '–ø–∑–¥–µ—Ü', '–ø.+–∑–¥–µ—Ü', '–ø–∏–∑–¥', '.+–ø–∏–∑–∂.+',
                '–ø–∏–¥.+—Ä', '–ø–∏–¥—Ä',
                '–¥.–ª–±.+–±',
                'f.+ck', 's.+ck', 'fck', 'sck']

    excepts = ['—Ö–æ—Ä–æ—à–∏–π', '—Ö–æ—Ä–æ—à–∏–π.', '—É–±–∏–ª', '—É–±–∏–ª.']
    words = message.text.split()
    bad_found = False
    for check in words:
        # Mat -> –ú–∞—Ç
        check = rep(check)
        # -–ú#–∞—Ç$ => –ú–∞—Ç
        regex = compile('[^a-zA-Z–∞-—è–ê-–Ø–Å—ë]')
        check = regex.sub('', check)
        if bad_found:
            break
        for bad in bad_list:
            if is_bad(check.lower(), bad, excepts):
                bad_found = True
                break
    if not bad_found:
        for check in words:
            check = rep(check)
            regex = compile('[^a-zA-Z–∞-—è–ê-–Ø–Å—ë]')
            check = regex.sub('.', check)
            if bad_found:
                break
            for bad in bad_list:
                if is_bad(check.lower(), bad, excepts):
                    bad_found = True
                    break
    if bad_found:
        database = read_db()
        chat_id = str(message.chat.id)
        user_id = str(message.from_user.id)
        if chat_id not in database:
            database[chat_id] = {}
        if user_id not in database[chat_id]:
            database[chat_id][user_id] = {}
            database[chat_id][user_id]["lunch"] = 0
        if user_id in database[chat_id]:
            database[chat_id][user_id]["lunch"] += 1
        bot.send_message(message.chat.id,
                             f'<a href="tg://user?id={user_id}">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–µ–ø–µ—á–∞—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.\n'
                             f'–ö–æ–ª-–≤–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö –æ–±–µ–¥–æ–≤: {database[chat_id][user_id]["lunch"]}',
                             parse_mode='HTML')
        write_db(database)


@bot.message_handler(commands=['stats'])  # stats
def send_stats(message):
    database = read_db()
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    if user_id not in database[chat_id]:
        database[chat_id] = {}
        database[chat_id][user_id] = {}
        database[chat_id][user_id]["lunch"] = 0
    else:
        lunch_count = database[chat_id][user_id]["lunch"]
        if lunch_count > 0:
            if lunch_count == 1: obed = "–æ–±–µ–¥–∞"
            else: obed = "–æ–±–µ–¥–æ–≤"
            bot.send_message(chat_id, f'<a href="tg://user?id={user_id}">–í—ã</a> —É–±–∏–ª–∏ {database[chat_id][user_id]["lunch"]} {obed}! –£–∂–∞—Å...', parse_mode='HTML')
        else:
            bot.send_message(chat_id, f'<a href="tg://user?id={user_id}">–í—ã</a> –Ω–µ —É–±–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ–±–µ–¥–∞ —Å–µ–≥–æ–¥–Ω—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!', parse_mode='HTML')


@bot.message_handler()
def catch_all_messages(message):
    catch(message)


@bot.edited_message_handler()
def catch_edited_messages(message):
    catch(message)


def main():
    mod = 1
    if mod == 1:
        while True:
            try:
                bot.polling()
            except KeyboardInterrupt:
                exit()
            except:
                pass
    elif mod == 2:
        bot.polling()
    else:
        exit()


if __name__ == "__main__":
    main()
